import logging
import os
import requests
from telegram import Update
from telegram.ext import Application, MessageHandler, CommandHandler, filters, ContextTypes
from dotenv import load_dotenv
from db_sqlite import init_db, save_search
from deep_translator import GoogleTranslator

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ===
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
OMDB_API_KEY = os.getenv("OMDB_API_KEY")
translator = GoogleTranslator(source='auto', target='en')
translator_ru = GoogleTranslator(source='en', target='ru')

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

init_db()

# === –ö–æ–º–∞–Ω–¥–∞ /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞, –∏ —è –Ω–∞–π–¥—É –æ –Ω—ë–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.")

# === –ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞ ===
async def search_movie(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.message.text.strip()
    if not query:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞.")
        return

    try:
        # –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
        translated_query = translator.translate(query)
        logger.info(f"–ü–µ—Ä–µ–≤–µ–¥—ë–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å: {translated_query}")

        url = f"http://www.omdbapi.com/?t={translated_query}&apikey={OMDB_API_KEY}&plot=full&r=json"
        response = requests.get(url).json()
        logger.info(f"–û—Ç–≤–µ—Ç OMDb: {response}")

        if response.get("Response") == "True":
            title = response.get("Title")
            year = response.get("Year")
            director = response.get("Director")
            genre = response.get("Genre")
            plot = response.get("Plot")
            imdb = response.get("imdbRating")

            # –ü–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Å—é–∂–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
            title_ru = translator_ru.translate(title)
            plot_ru = translator_ru.translate(plot)

            message = (
                f"üé¨ <b>{title_ru}</b> ({year})\n"
                f"üéû –ñ–∞–Ω—Ä: {genre}\n"
                f"üé¨ –†–µ–∂–∏—Å—Å—ë—Ä: {director}\n"
                f"‚≠ê IMDb: {imdb}\n"
                f"üìù –°—é–∂–µ—Ç: {plot_ru}"
            )
            save_search(query, True)
            await update.message.reply_text(message, parse_mode="HTML")
        else:
            save_search(query, False)
            await update.message.reply_text("–§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ñ–∏–ª—å–º–∞.")

# === –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    if not BOT_TOKEN or not OMDB_API_KEY:
        raise ValueError("BOT_TOKEN –∏–ª–∏ OMDB_API_KEY –Ω–µ —É–∫–∞–∑–∞–Ω –≤ .env")

    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, search_movie))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()
